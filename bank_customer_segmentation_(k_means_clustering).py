# -*- coding: utf-8 -*-
"""Bank Customer Segmentation (K-Means Clustering).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WScKMejsbIWW_pmQVJHUQBb7IkTYmJ3r

**STEP 1: INSTALL THE NECESSARY LIBRARIES**
"""

!pip install pandas numpy matplotlib seaborn scikit-learn openpyxl xlrd

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')

"""**STEP 2: CREATING PIPELINE TO ACCEPT DATA (EXCEL FILES AND CSV FILES)**"""

print("\n Step 2: Let's load your data")

from google.colab import files
print("Please upload your Excel file (.xlsx or .xls):")
uploaded = files.upload()
filename = list(uploaded.keys())[0]

if filename.endswith(('.xlsx', '.xls')):
    df = pd.read_excel(filename)
    print(f" Excel file loaded: {df.shape[0]} customers, {df.shape[1]} features")
else:
    df = pd.read_csv(filename)
    print(f" CSV file loaded: {df.shape[0]} customers, {df.shape[1]} features")

print("\n Data Overview:")
print(df.head())
print(f"\nMissing values: {df.isnull().sum().sum()}")

"""**STEP 3: DATA PRE-PROCESSING**"""

print("\n Step 3: Data Preprocessing")

df_clean = df.copy()
for col in df_clean.columns:
    if df_clean[col].dtype == 'object':
        df_clean[col].fillna('unknown', inplace=True)
    else:
        df_clean[col].fillna(df_clean[col].median(), inplace=True)

for col in df_clean.columns:
    if df_clean[col].dtype == 'object':
        le = LabelEncoder()
        df_clean[col] = le.fit_transform(df_clean[col])

print(f"All columns in dataset: {list(df_clean.columns)}")

exclude_cols = ['y']
feature_cols = [col for col in df_clean.columns if col not in exclude_cols]

print(f"Excluded columns: {exclude_cols}")
print(f"Selected features: {feature_cols}")

if len(feature_cols) < 2:
    print("Warning: Very few features available")
    feature_cols = list(df_clean.columns)

X = df_clean[feature_cols]
print(f"Using {len(feature_cols)} features for clustering")
print(f"Feature names: {feature_cols}")
print(f"Data shape for clustering: {X.shape}")

"""**STEP 4: DATA SCALING (VERY IMPORTANT)**"""

print("\n Step 4: Scaling Data")
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
print(" Data scaled successfully")

"""**STEP 5: DETERMINING OPTIMAL CLUSTER NUMBER AND APPLYING K-MEANS CLUSTERING**"""

print("\n Step 5: Determining the optimal number of clusters")

inertias = []
k_range = range(2, 9)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertias.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(k_range, inertias, 'bo-')
plt.title('Elbow Method - Finding Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia')
plt.grid(True)
plt.show()

optimal_k = 4
print(f" Using {optimal_k} clusters")

print("\n Applying K-Means Clustering")

kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

df_clean['Cluster'] = clusters
print(f" Clustering completed!")

cluster_counts = df_clean['Cluster'].value_counts().sort_index()
print("\n Cluster Distribution:")
for cluster, count in cluster_counts.items():
    print(f"Cluster {cluster}: {count} customers ({count/len(df_clean)*100:.1f}%)")

"""**STEP 6: VISUALIZATION AND BUSINESS INSIGHTS**"""

print("\n Step 6: Visualizing Clusters")

n_features = X_scaled.shape[1]
print(f"Number of features: {n_features}")

if n_features >= 2:
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)

    plt.figure(figsize=(12, 8))
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']

    for i in range(optimal_k):
        cluster_data = X_pca[clusters == i]
        plt.scatter(cluster_data[:, 0], cluster_data[:, 1],
                    c=colors[i], label=f'Cluster {i}', alpha=0.7)

    plt.title('Customer Segments Visualization (PCA)')
    plt.xlabel(f'PC1 ({pca.explained_variance_ratio_[0]:.1%} variance)')
    plt.ylabel(f'PC2 ({pca.explained_variance_ratio_[1]:.1%} variance)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.show()

elif n_features == 1:
    plt.figure(figsize=(12, 6))
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray']

    for i in range(optimal_k):
        cluster_data = X_scaled[clusters == i]
        plt.scatter(cluster_data[:, 0], [i] * len(cluster_data),
                    c=colors[i], label=f'Cluster {i}', alpha=0.7, s=50)

    plt.title('Customer Segments Visualization (1D)')
    plt.xlabel(f'Feature: {feature_cols[0]}')
    plt.ylabel('Cluster')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.show()

else:
    print("No features available for visualization")

plt.figure(figsize=(10, 6))
cluster_counts.plot(kind='bar', color=['red', 'blue', 'green', 'orange'][:optimal_k])
plt.title('Number of Customers per Cluster')
plt.xlabel('Cluster')
plt.ylabel('Number of Customers')
plt.xticks(rotation=0)
plt.grid(True, alpha=0.3)
plt.show()

print("\n Step 7: Cluster Analysis")

cluster_profiles = df_clean.groupby('Cluster')[feature_cols].mean()
print("\n Cluster Profiles (Average Values):")
print(cluster_profiles.round(2))

plt.figure(figsize=(12, 8))
sns.heatmap(cluster_profiles.T, annot=True, cmap='viridis',
            cbar_kws={'label': 'Average Value'})
plt.title('Cluster Profiles Heatmap')
plt.xlabel('Cluster')
plt.ylabel('Features')
plt.tight_layout()
plt.show()

print("\n Step 8: Business Insights")

for cluster_id in range(optimal_k):
    cluster_data = df_clean[df_clean['Cluster'] == cluster_id]
    size = len(cluster_data)
    percentage = (size / len(df_clean)) * 100

    avg_values = cluster_data[feature_cols].mean()
    top_features = avg_values.nlargest(3).index.tolist()

    print(f"\nðŸŽ¯ Cluster {cluster_id}:")
    print(f"   Size: {size} customers ({percentage:.1f}%)")
    print(f"   Key characteristics: {', '.join(top_features)}")

    if len(feature_cols) > 0:
        avg_first_feature = avg_values.iloc[0]
        print(f"   Average {feature_cols[0]}: {avg_first_feature:.1f}")

print("\n Step 9: Saving Results")

results = df_clean[['Cluster']].copy()
results['Customer_ID'] = range(len(results))

results.to_csv('customer_segments.csv', index=False)
cluster_profiles.to_csv('cluster_profiles.csv')

print(" Results saved:")
print("- customer_segments.csv (customer cluster assignments)")
print("- cluster_profiles.csv (cluster characteristics)")

files.download('customer_segments.csv')
files.download('cluster_profiles.csv')

print("\n Customer Segmentation Complete!")
print(f"Found {optimal_k} distinct customer segments")
print("Check the visualizations above to understand your customer groups!")